{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","types","typesList","map","type","react_default","a","createElement","className","src","url","alt","name","React","Component","PokeList","getInputValuePokemon","bind","assertThisInitialized","event","pokemonSearch","target","value","console","log","data","placeholder","onChange","components_Pokemon","id","evolution","App","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c06cf57a.chunk.js","sourcesContent":["import React from 'react';\n\nclass Pokemon extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {types: this.props.types}\n    }\n    render() {\n        const typesList = this.state.types.map(type => <li className=\"li\">{type}</li>)\n      return (\n        <div className=\"container-pokemon\">\n            <img className=\"img\" src={this.props.url} alt=\"\"></img>\n            <h1 className=\"h2\">{this.props.name}</h1>\n            <ul className=\"types-list\">{typesList}</ul>\n        </div>\n      );\n    }\n  }\n\nexport default Pokemon;","import React from 'react';\nimport Pokemon from './Pokemon'\n\nclass PokeList extends React.Component {\nconstructor(props){\n    super(props);\n    this.getInputValuePokemon = this.getInputValuePokemon.bind(this);\n}\n\ngetInputValuePokemon(event){\n    let pokemonSearch = event.target.value;\n    console.log('Quiero buscar:', pokemonSearch);\n}\n\n  render() {\n      console.log(this.props.data);\n    return (\n        <div>\n            <h1 className=\"h1\">Mi lista de Pokémon</h1>\n            <input type=\"text\" placeholder=\"Search your pokémon...\" onChange={this.getInputValuePokemon}/>\n            <ul className=\"item-list\">\n                    <Pokemon\n                        id=\"1\" \n                        name=\"bulbasaur\" \n                        types={[\n                            \"poison\",\n                            \"grass\"\n                        ]}\n                        evolution=\"\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"\n                    />\n                    <Pokemon \n                        id=\"2\"\n                        name=\"ivysaur\"\n                        types={[\n                            \"poison\",\n                            \"grass\"\n                        ]}\n                        evolution=\"bulbasaur\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\"\n                    />\n                    <Pokemon \n                        id=\"3\"\n                        name=\"venusaur\"\n                        types={[\n                            \"poison\",\n                            \"grass\"\n                        ]}\n                        evolution=\"ivysaur\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\"\n                    />\n                    <Pokemon \n                        id=\"4\"\n                        name=\"charmander\"\n                        types={[\n                            \"fire\"\n                        ]}\n                        evolution=\"charmeleon\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"\n                    />\n                    <Pokemon \n                        id=\"5\"\n                        name=\"charmeleon\"\n                        types={[\n                            \"fire\"\n                        ]}\n                        evolution=\"charizard\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\"\n                    />\n                    <Pokemon \n                        id=\"6\"\n                        name=\"charizard\"\n                        types={[\n                            \"fire\"\n                        ]}\n                        evolution=\"\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\"\n                    />\n                    <Pokemon \n                        id=\"7\"\n                        name=\"squirtle\"\n                        types={[\n                            \"water\"\n                        ]}\n                        evolution=\"wartortle\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"\n                    />\n                    <Pokemon \n                        id=\"8\"\n                        name=\"wartortle\"\n                        types={[\n                            \"water\"\n                        ]}\n                        evolution=\"blastoise\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\"\n                    />\n                    <Pokemon \n                        id=\"9\"\n                        name=\"blastoise\"\n                        types={[\n                            \"water\"\n                        ]}\n                        evolution=\"\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\"\n                    />\n                    <Pokemon \n                        id=\"10\"\n                        name=\"caterpie\"\n                        types={[\n                            \"bug\"\n                        ]}\n                        evolution=\"metapod\"\n                        url=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\"\n                    />\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default PokeList;\n","import React, { Component } from 'react';\nimport PokeList from './components/PokeList';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PokeList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}